#!/bin/bash

set -e

echo "üßπ Iniciando processo de limpeza do reposit√≥rio Git com seguran√ßa..."

junk_list=(
  ".DS_Store"
  "Icon?"
  "Thumbs.db"
  "*.swp"
  "*.swo"
)

backup_dir=""

### Fun√ß√£o auxiliar para backup completo
backup_repo() {
  backup_dir="../$(basename "$PWD")-backup-$(date +%Y%m%d-%H%M%S)"
  echo "üíæ Criando backup completo do reposit√≥rio em: $backup_dir"
  git clone --mirror . "$backup_dir"
  echo "‚úÖ Backup criado com sucesso."
}

### Verifica√ß√£o de HEAD v√°lida
verify_head() {
  if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
    echo "‚ùå HEAD inv√°lido. O reposit√≥rio pode estar corrompido. Abortando..."
    exit 1
  fi
}

### Remo√ß√£o de arquivos do sistema
echo "üîç Removendo arquivos indesejados do diret√≥rio..."
for junk in "${junk_list[@]}"; do
  find . -name "$junk" -exec rm -f {} + 2>/dev/null && echo "   ‚Üí Removido: $junk"
done
echo "‚úÖ Arquivos indesejados removidos."

### Limpeza do index Git
echo "üì¶ Limpando arquivos do index Git (se versionados)..."
for junk in "${junk_list[@]}"; do
  git rm --cached -r "$junk" 2>/dev/null || true
done
echo "‚úÖ Index limpo."

### Verifica mudan√ßas para commit
if [[ -n $(git status --porcelain) ]]; then
  echo "üìù Mudan√ßas detectadas:"
  git status -s

  read -p "Deseja realizar um commit dessas mudan√ßas? (s/n): " do_commit
  if [[ "$do_commit" == "s" ]]; then
    read -p "Informe a mensagem do commit [default: 'chore: remove arquivos indesejados']: " commit_msg
    commit_msg=${commit_msg:-"chore: remove arquivos indesejados"}
    git commit -am "$commit_msg"
    echo "‚úÖ Commit realizado."
  else
    echo "‚ö†Ô∏è  Mudan√ßas n√£o foram commitadas."
  fi
else
  echo "üì≠ Nenhuma mudan√ßa para commit."
fi

### Reescrever hist√≥rico
read -p "Deseja reescrever o hist√≥rico com git-filter-repo para remo√ß√£o completa de junk antigo? (s/n): " rewrite_history
if [[ "$rewrite_history" == "s" ]]; then
  backup_repo

  echo "üßº Rodando git gc e fsck antes da reescrita..."
  git gc --prune=now
  git fsck --full

  echo "üö® Isso ir√° reescrever TODO o hist√≥rico do Git."
  read -p "Tem certeza que deseja continuar? (s/n): " confirm
  if [[ "$confirm" == "s" ]]; then
    echo "‚öôÔ∏è  Salvando URL do remote origin..."
    origin_url=$(git remote get-url origin 2>/dev/null || echo "")
    echo "$origin_url" > .origin_backup_url.tmp
    git remote remove origin 2>/dev/null || true

    echo "‚öôÔ∏è  Rodando git-filter-repo com seguran√ßa..."
    git filter-repo \
      --invert-paths \
      $(for junk in "${junk_list[@]}"; do echo --path-glob="$junk"; done)

    verify_head

    restored_url=$(cat .origin_backup_url.tmp 2>/dev/null || echo "")
    rm -f .origin_backup_url.tmp

    if [[ -n "$restored_url" ]]; then
      git remote add origin "$restored_url"
      echo "üîÑ Remote origin restaurado: $restored_url"

      current_branch=$(git symbolic-ref --short HEAD)
      echo "üîó Configurando tracking entre '$current_branch' e 'origin/$current_branch'..."
      git branch --set-upstream-to=origin/"$current_branch" "$current_branch" || true
    else
      echo "‚ö†Ô∏è  Nenhuma URL de remote encontrada. Voc√™ precisar√° configurar o origin manualmente."
    fi

    echo "‚úÖ Hist√≥rico reescrito com sucesso."
  else
    echo "‚ùå Reescrita do hist√≥rico cancelada."
  fi
else
  echo "‚è≠Ô∏è  Reescrita do hist√≥rico ignorada."
fi

### Push final com prote√ß√µes e instru√ß√µes
read -p "Deseja enviar as mudan√ßas para o reposit√≥rio remoto com 'git push --force-with-lease'? (s/n): " do_push
if [[ "$do_push" == "s" ]]; then
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  remote_url=$(git config --get remote.origin.url)

  if [[ -z "$remote_url" ]]; then
    echo "‚ö†Ô∏è  Nenhum remote origin configurado. Vamos configurar agora..."
    read -p "Informe a URL do reposit√≥rio remoto: " new_remote
    git remote add origin "$new_remote"
    remote_url="$new_remote"
    echo "‚úÖ Remote origin configurado para: $remote_url"
  fi

  echo "üì§ Enviando mudan√ßas com sobrescrita segura para '$current_branch'..."
  echo "‚ö†Ô∏è  ATEN√á√ÉO: Este push ir√° sobrescrever o hist√≥rico remoto da branch '$current_branch'."
  echo "   Certifique-se de que outros colaboradores estejam cientes."

  read -p "Confirmar push com '--force-with-lease'? (s/n): " confirm_push
  if [[ "$confirm_push" == "s" ]]; then
    git push --force-with-lease origin "$current_branch" || {
      echo "‚ö†Ô∏è  Push falhou. Tentando configurar upstream..."
      git push --set-upstream origin "$current_branch"
    }

    echo "‚úÖ Push realizado com sucesso."

    ### Pergunta se deseja excluir backup
    if [[ -n "$backup_dir" && -d "$backup_dir" ]]; then
      read -p "Deseja excluir o backup criado em '$backup_dir'? (s/n): " remove_backup
      if [[ "$remove_backup" == "s" ]]; then
        rm -rf "$backup_dir"
        echo "üóëÔ∏è  Backup exclu√≠do com sucesso."
      else
        echo "üíæ Backup mantido em: $backup_dir"
      fi
    fi

    echo
    echo "üì¢ Importante: avise aos colaboradores que o hist√≥rico da branch '$current_branch' foi reescrito."
    echo "üîÅ Eles devem executar os seguintes comandos para evitar conflitos:"
    echo
    echo "   git fetch origin"
    echo "   git checkout $current_branch"
    echo "   git reset --hard origin/$current_branch"
    echo
  else
    echo "üö´ Push cancelado."
  fi
else
  echo "üö´ Push cancelado pelo usu√°rio."
fi

echo
echo "üéâ Processo conclu√≠do com seguran√ßa."
echo "üëâ Pr√≥ximos passos:"
echo "   ‚Ä¢ Se voc√™ reescreveu o hist√≥rico, avise seus colaboradores."
echo "   ‚Ä¢ Se n√£o fez push ainda, use 'git push --force-with-lease'."
echo "   ‚Ä¢ Revise se o .gitignore cobre todos os arquivos indesejados."

### Verifica√ß√£o tardia do .gitignore
for junk in "${junk_list[@]}"; do
  if ! grep -qxF "$junk" .gitignore 2>/dev/null; then
    echo "‚ö†Ô∏è  Aviso: '$junk' n√£o est√° listado no .gitignore"
    echo "   ‚Üí Considere adicion√°-lo para evitar reversionamento futuro."
  fi
done

if [[ -n "$backup_dir" ]]; then
  echo "   ‚Ä¢ Se o backup foi mantido, ele est√° em: $backup_dir"
fi
